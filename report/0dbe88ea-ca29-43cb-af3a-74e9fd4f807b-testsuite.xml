<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1570379832394" stop="1570379862935">
  <name>test_login</name>
  <labels/>
  <test-cases>
    <test-case start="1570379832394" status="broken" stop="1570379862475">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[13478603122-123456-itheima0-True]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1570379862477" status="broken" stop="1570379862495">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[ 13478603122 -123456-itheima01-True]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1570379862497" status="broken" stop="1570379862512">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[itheima01-123456-itheima01-True]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1570379862514" status="broken" stop="1570379862527">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[ itheima01 -123456-itheima01-True]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1570379862529" status="broken" stop="1570379862568">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[13478603121-123456-\u6b64\u7528\u6237\u4e0d\u5b58\u5728-False]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1570379862572" status="broken" stop="1570379862667">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[134786031221-123456-\u6b64\u7528\u6237\u4e0d\u5b58\u5728-False]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1570379862675" status="broken" stop="1570379862761">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[13478603122-1234567-\u767b\u5f55\u5bc6\u7801\u9519\u8bef-False]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1570379862765" status="broken" stop="1570379862848">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[itheima011-123456-\u6b64\u7528\u6237\u4e0d\u5b58\u5728-False]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1570379862853" status="broken" stop="1570379862935">
      <description>登录测试方法</description>
      <name>TestLogin.test_login[itheima01-1234567-\u767b\u5f55\u5bc6\u7801\u9519\u8bef-False]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
        """初始化页面对象"""
        self.login = PageIn().get_page_login()
&gt;       self.login.click_op()

case\test_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\login_page.py:13: in click_op
    self.click_func(page.close_img)
base\base.py:33: in click_func
    self.find_element_func(location).click()
base\base.py:18: in find_element_func
    lambda x: x.find_element(*location))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="07786bd4-d98d-4485-87bc-ac7fe58dd001")&gt;
method = &lt;function Base.find_element_func.&lt;locals&gt;.&lt;lambda&gt; at 0x00000194EFE1B400&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\appdata\local\programs\python\python36\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7020-MainThread"/>
        <label name="host" value="iPhone32"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
